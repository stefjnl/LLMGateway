// <auto-generated />
using System;
using LLMGateway.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LLMGateway.Infrastructure.Migrations
{
    [DbContext(typeof(GatewayDbContext))]
    partial class GatewayDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LLMGateway.Domain.Entities.ModelPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("InputCostPer1MTokens")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("input_cost_per_1m_tokens");

                    b.Property<int>("MaxContextTokens")
                        .HasColumnType("integer")
                        .HasColumnName("max_context_tokens");

                    b.Property<decimal>("OutputCostPer1MTokens")
                        .HasColumnType("decimal(18,6)")
                        .HasColumnName("output_cost_per_1m_tokens");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("model_pricing", (string)null);
                });

            modelBuilder.Entity("LLMGateway.Domain.Entities.RequestLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("provider_name");

                    b.Property<long>("ResponseTime")
                        .HasColumnType("bigint")
                        .HasColumnName("response_time_ms");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<bool>("WasFallback")
                        .HasColumnType("boolean")
                        .HasColumnName("was_fallback");

                    b.HasKey("Id");

                    b.HasIndex("ProviderName")
                        .HasDatabaseName("ix_request_logs_provider_name");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_request_logs_timestamp");

                    b.ToTable("request_logs", (string)null);
                });

            modelBuilder.Entity("LLMGateway.Domain.Entities.ModelPricing", b =>
                {
                    b.OwnsOne("LLMGateway.Domain.ValueObjects.ModelName", "Model", b1 =>
                        {
                            b1.Property<Guid>("ModelPricingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("model_provider");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("model_name");

                            b1.HasKey("ModelPricingId");

                            b1.ToTable("model_pricing");

                            b1.WithOwner()
                                .HasForeignKey("ModelPricingId");
                        });

                    b.Navigation("Model")
                        .IsRequired();
                });

            modelBuilder.Entity("LLMGateway.Domain.Entities.RequestLog", b =>
                {
                    b.OwnsOne("LLMGateway.Domain.ValueObjects.TokenCount", "InputTokens", b1 =>
                        {
                            b1.Property<Guid>("RequestLogId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("input_tokens");

                            b1.HasKey("RequestLogId");

                            b1.ToTable("request_logs");

                            b1.WithOwner()
                                .HasForeignKey("RequestLogId");
                        });

                    b.OwnsOne("LLMGateway.Domain.ValueObjects.ModelName", "ModelUsed", b1 =>
                        {
                            b1.Property<Guid>("RequestLogId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("model_provider");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("model_used");

                            b1.HasKey("RequestLogId");

                            b1.ToTable("request_logs");

                            b1.WithOwner()
                                .HasForeignKey("RequestLogId");
                        });

                    b.OwnsOne("LLMGateway.Domain.ValueObjects.TokenCount", "OutputTokens", b1 =>
                        {
                            b1.Property<Guid>("RequestLogId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("output_tokens");

                            b1.HasKey("RequestLogId");

                            b1.ToTable("request_logs");

                            b1.WithOwner()
                                .HasForeignKey("RequestLogId");
                        });

                    b.OwnsOne("LLMGateway.Domain.ValueObjects.CostAmount", "EstimatedCost", b1 =>
                        {
                            b1.Property<Guid>("RequestLogId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("ValueUsd")
                                .HasColumnType("decimal(18,6)")
                                .HasColumnName("estimated_cost_usd");

                            b1.HasKey("RequestLogId");

                            b1.ToTable("request_logs");

                            b1.WithOwner()
                                .HasForeignKey("RequestLogId");
                        });

                    b.Navigation("EstimatedCost")
                        .IsRequired();

                    b.Navigation("InputTokens")
                        .IsRequired();

                    b.Navigation("ModelUsed")
                        .IsRequired();

                    b.Navigation("OutputTokens")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
